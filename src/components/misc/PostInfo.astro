---
import { articleConfig, siteConfig } from '@/config';
import MetaIcon from '@components/widgets/MetaIcon.astro';
import { getCategoryUrl, getTagUrl } from '@utils/content-utils';
import { t } from '@utils/i18n';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
  title: string;
  publishedAt?: Date;
  category?: string;
  tags?: string[];
  wordCount?: number;
  readingTime?: number;
  lang?: string;
  class?: string;
}

const {
  title,
  publishedAt,
  category,
  tags,
  wordCount,
  readingTime,
  lang,
  class: className,
  ...rest
} = Astro.props;

const metas: ({ icon: string; text: string; link?: string; time?: Date } | undefined)[] = [
  publishedAt && {
    icon: 'material-symbols:calendar-clock-outline-rounded',
    text: publishedAt.toLocaleDateString(lang || siteConfig.lang.replace('_', '-')),
    time: publishedAt,
  },
  articleConfig.wordCount && typeof wordCount === 'number'
    ? {
        icon: 'material-symbols:docs-rounded',
        text: t.status.wordsCount(wordCount),
      }
    : undefined,
  articleConfig.readingTime && typeof readingTime === 'number'
    ? {
        icon: 'material-symbols:nest-clock-farsight-analog-rounded',
        text: t.status.readTime(readingTime),
      }
    : undefined,
  category
    ? {
        icon: 'material-symbols:category-outline-rounded',
        text: category,
        link: getCategoryUrl(category),
      }
    : undefined,
  ...(tags?.map((tag) => {
    return {
      icon: 'material-symbols:tag-rounded',
      text: tag,
      link: getTagUrl(tag),
    };
  }) || []),
];
---

<div id="post-info" class:list={['flex flex-col max-md:px-3', className]} {...rest}>
  <h1 class="text-3xl font-bold">{title}</h1>
  {
    metas.filter((item) => Boolean(item)).length > 0 && (
      <div id="post-meta" class="mt-4 flex flex-wrap gap-3">
        {metas.map((meta) => {
          return (
            meta && (
              <div class="text-base-content/60 flex items-center text-sm">
                <MetaIcon name={meta.icon} />
                {(() => {
                  const text = meta.time ? (
                    <time datetime={meta.time?.toISOString()}>{meta.text}</time>
                  ) : (
                    <span>{meta.text}</span>
                  );
                  return meta.link ? (
                    <a href={meta.link} title={meta.text}>
                      {text}
                    </a>
                  ) : (
                    text
                  );
                })()}
              </div>
            )
          );
        })}
      </div>
    )
  }
</div>
