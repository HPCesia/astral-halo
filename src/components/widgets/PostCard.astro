---
import { siteConfig } from '@/config';
import { getCategoryUrl, getTagUrl } from '@utils/content-utils';
import type { ImageMetadata } from 'astro';
import MetaIcon from './MetaIcon.astro';
import PostCardCover from './PostCardCover.astro';
import ReadMoreButton from './ReadMoreButton.astro';

interface Props {
  class?: string;
  title: string;
  url: string;
  published: Date;
  updated?: Date;
  tags: string[];
  category?: string;
  cover?: string | ImageMetadata;
  description: string;
}

const { title, url, published, updated, tags, category, cover } = Astro.props;
const className = Astro.props.class;

const hasCover = cover !== '' && cover !== undefined && cover !== null;

const metas: ({ icon: string; text: string; link?: string; time?: Date } | undefined)[] = [
  {
    icon: 'material-symbols:calendar-clock-outline-rounded',
    text: published.toLocaleDateString(siteConfig.lang.replace('_', '-')),
    time: published,
  },
  updated && {
    icon: 'material-symbols:edit-calendar-outline-rounded',
    text: updated.toLocaleDateString(siteConfig.lang.replace('_', '-')),
  },
  category
    ? {
        icon: 'material-symbols:category-outline-rounded',
        text: category,
        link: getCategoryUrl(category),
      }
    : undefined,
  ...tags.map((tag) => {
    return {
      icon: 'material-symbols:tag-rounded',
      text: tag,
      link: getTagUrl(tag),
    };
  }),
];
---

<div
  class:list={[
    'card border-base-300 bg-base-200/25 flex w-full flex-col-reverse overflow-hidden border md:flex-row md:justify-between',
    className,
  ]}
>
  <div class="card-body">
    <a href={url} class="card-title">{title}</a>
    <div class="text-base-content/60 mb-3 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm">
      {
        metas.map((meta) => {
          return (
            meta && (
              <div class="flex items-center gap-1">
                <MetaIcon name={meta.icon} />
                {(() => {
                  const text = meta.time ? (
                    <time datetime={meta.time?.toISOString()}>{meta.text}</time>
                  ) : (
                    <span>{meta.text}</span>
                  );
                  return meta.link ? (
                    <a href={meta.link} title={meta.text}>
                      {text}
                    </a>
                  ) : (
                    text
                  );
                })()}
              </div>
            )
          );
        })
      }
    </div>
  </div>
  {
    hasCover ? (
      <div class="flex items-center justify-center md:h-48 md:w-3/4 md:max-w-96">
        <PostCardCover url={url} title={title} cover={cover} />
      </div>
    ) : (
      <ReadMoreButton href={url} title={title} />
    )
  }
</div>
