---
import { Icon } from 'astro-icon/components';
import SearchBaseUI from './SearchBaseUI.astro';

const bundlePath = `${import.meta.env.BASE_URL}pagefind/`;
---

<SearchBaseUI
  data-pagefind-ui
  data-bundle-path={bundlePath}
  data-base-url={import.meta.env.BASE_URL}
/>

<template id="pagefind-result-template">
  <a class="group hover:bg-primary/30 w-full rounded-md p-2 duration-150" href="#">
    <div class="flex flex-row items-center gap-1 text-center">
      <span class="group-hover:text-primary text-lg duration-150">Fake Result</span>
      <Icon
        name="material-symbols:chevron-right"
        class="text-primary"
        height="1.125rem"
        width="1.125rem"
      />
    </div>
    <div id="pagefind-result-template-excerpt" class="text-sm opacity-60">
      This is a fake result.
    </div>
  </a>
</template>

<script is:inline>
  async function setup() {
    for (const el of document.querySelectorAll('[data-pagefind-ui]')) {
      const bundlePath = el.getAttribute('data-bundle-path');
      const baseUrl = el.getAttribute('data-base-url');
      const pagefind = await import(`${bundlePath}pagefind.js`);
      await pagefind.options({
        baseUrl: baseUrl,
        basePath: bundlePath,
      });
      pagefind.init();

      const searchInput = el.querySelector('input');
      const searchResultsWrapper = el.querySelector('.search-result');
      const searchResultTemplate = document.getElementById('pagefind-result-template');
      if (!searchInput || !searchResultsWrapper || !searchResultTemplate) {
        console.error('Pagefind: Required elements not found');
        return;
      }

      const search = async (text) => {
        const results = (await pagefind.debouncedSearch(text, 300)).results;
        searchResultsWrapper.innerHTML = '';
        if (results.length === 0) {
          searchResultsWrapper.textContent = 'No results found';
          return;
        }
        results.forEach(async (result) => {
          const data = await result.data();
          const resultNode = searchResultTemplate.content.cloneNode(true);
          const resultLink = resultNode.querySelector('a');
          const resultTitle = resultNode.querySelector('span');
          const resultExcerpt = resultNode.querySelector('#pagefind-result-template-excerpt');

          resultLink.setAttribute('href', data.url);
          resultTitle.textContent = data.meta.title;
          resultExcerpt.innerHTML = data.excerpt;

          resultExcerpt.removeAttribute('id');
          searchResultsWrapper.appendChild(resultNode);
        });
      };

      searchInput.addEventListener('input', async () => {
        await search(searchInput.value);
      });
    }
  }

  document.addEventListener('astro:page-load', setup);
  setup();
</script>

<style is:global>
  [data-pagefind-ui] mark {
    background-color: transparent;
    color: var(--color-secondary);
  }
</style>
