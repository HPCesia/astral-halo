---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import path from 'path';
interface Props {
  id?: string;
  src: ImageMetadata | string;
  class?: string;
  alt?: string;
  position?: string;
  basePath?: string;
}

const { id, src, alt, position = 'center', basePath = '/' } = Astro.props;
const className = Astro.props.class;

const isLocal =
  typeof src !== 'string' ||
  !(
    src.startsWith('/') ||
    src.startsWith('http') ||
    src.startsWith('https') ||
    src.startsWith('data:')
  );
const isPublic = typeof src === 'string' && src.startsWith('/');

let img: ImageMetadata | undefined;
if (isLocal) {
  if (typeof src === 'string') {
    const files = import.meta.glob<ImageMetadata>(
      '../../**/*.{png,jpg,jpeg,tiff,webp,gif,svg,avif,jfif,pjpeg,pjp,ico}',
      {
        import: 'default',
      }
    );
    let normalizedPath = path.normalize(path.join('../../', basePath, src)).replace(/\\/g, '/');
    const file = files[normalizedPath];
    if (!file) {
      console.error(
        `\n[ERROR] Image file not found: ${normalizedPath.replace('../../', 'src/')}`
      );
    }
    img = await file();
  } else {
    img = src;
  }
}

const imageClass = 'w-full h-full object-cover';
const imageStyle = `object-position: ${position}`;
---

<div id={id} class:list={[className, 'relative overflow-hidden']}>
  {isLocal && img && <Image src={img} alt={alt || ''} class={imageClass} style={imageStyle} />}
  {
    !isLocal && !isPublic && (
      <Image
        src={src as string}
        alt={alt || ''}
        class={imageClass}
        style={imageStyle}
        inferSize
      />
    )
  }
  {
    !isLocal && isPublic && (
      <img
        src={new URL(src, Astro.site) as unknown as string}
        alt={alt || ''}
        class={imageClass}
        style={imageStyle}
      />
    )
  }
</div>
