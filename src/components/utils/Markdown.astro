---
import '@/styles/markdown.css';
import type { HTMLAttributes } from 'astro/types';
import 'cheerio';
import { load as cheerioLoad } from 'cheerio';
import Replacer from './Replacer.astro';

interface Props extends HTMLAttributes<'article'> {
  'bidirectional-references'?: {
    references: {
      reference: string;
      context: string;
      id: string;
    }[];
    allRefByCurrent: {
      refTo: {
        title: string;
        collection: 'posts' | 'spec';
        id: string;
      };
      context: string;
      offset: [number, number];
      id: string;
    }[];
  };
}

const {
  class: className,
  'bidirectional-references': bidirectionalReferences,
  ...rest
} = Astro.props;

const references = bidirectionalReferences?.references;
const allRefByCurrent = bidirectionalReferences?.allRefByCurrent;
const referenceReplacer = (_: string, reference: string, alias: string) => {
  const id = references?.find((item) => item.reference === reference.split('#')[0])?.id;
  if (!id) return '';
  const refTo = allRefByCurrent?.find((it) => it.id === id);
  if (!refTo) return '';
  const url =
    refTo.refTo.collection === 'posts' ? `/posts/${refTo.refTo.id}/` : `/${refTo.refTo.id}/`;
  return `<a href="${url}" id="wiki-${id}">${alias || reference}</a>`;
};
const referencePattern = /%%%%(.*?)(?:%%(.*?))?%%%%/g;

const imageZoomReplacer = (html: string) => {
  const $ = cheerioLoad(html);
  $('img:where(:not(inline img))').attr('data-zoom', '');
  return $.html();
};
const imageZoomPattern = null; // Use null to process entire HTML

const Fragment = bidirectionalReferences ? Replacer : 'Fragment';
---

<article class={className} {...rest}>
  <Fragment
    options={[
      { pattern: referencePattern, replacer: referenceReplacer },
      { pattern: imageZoomPattern, replacer: imageZoomReplacer },
    ]}
  >
    <slot />
  </Fragment>
</article>
