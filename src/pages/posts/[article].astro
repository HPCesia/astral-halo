---
import { siteConfig } from '@/config';
import BackLinks from '@components/misc/BackLinks.astro';
import License from '@components/misc/License.astro';
import PostInfo from '@components/misc/PostInfo.astro';
import ImageWrapper from '@components/utils/ImageWrapper.astro';
import Markdown from '@components/utils/Markdown.astro';
import PostPageLayout from '@layouts/PostPageLayout.astro';
import { getAllReferences, getPosts } from '@utils/content-utils';
import { t } from '@utils/i18n';
import { Icon } from 'astro-icon/components';
import { render } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((article) => ({
    params: { article: article.data.slug },
    props: { article },
  }));
}

const { article } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(article);
const coverSrc =
  typeof article.data.cover === 'string' ? article.data.cover : article.data.cover?.src;
const description = article.data.description || remarkPluginFrontmatter.excerpt;
const isDraft = article.data.draft === true;

const allReferences = await getAllReferences();
const allRefByCurrent = allReferences.filter((it) => it.refBy.id === article.id);
const allRefToCurrent = allReferences.filter((it) => it.refTo.id === article.id);

const references: {
  reference: string;
  context: string;
  id: string;
}[] = remarkPluginFrontmatter.references || [];

const backLinks: {
  refBy: {
    title: string;
    collection: 'posts' | 'spec';
    id: string;
  };
  context: string;
  offset: [number, number];
  id: string;
}[] = allRefToCurrent;
---

<PostPageLayout
  title={article.data.title}
  description={description}
  headings={headings}
  comment={article.data.comment}
  lang={article.data.lang}
  banner={coverSrc}
>
  <Fragment slot="header-content">
    <PostInfo
      title={article.data.title}
      publishedAt={article.data.published}
      category={article.data.category}
      tags={article.data.tags}
      wordCount={remarkPluginFrontmatter.words}
      readingTime={remarkPluginFrontmatter.minutes}
      lang={article.data.lang}
      class="mx-2 mt-4"
    />
  </Fragment>
  {
    siteConfig.banner === false && coverSrc && (
      <ImageWrapper src={coverSrc!} class="mb-6 rounded-xl shadow" alt={article.data.title} />
    )
  }
  <Markdown
    bidirectional-references={{
      references,
      allRefByCurrent,
    }}
  >
    {
      isDraft && (
        <div class="admonition admonition-note">
          <p class="admonition-title">
            <Icon name="material-symbols:info-outline-rounded" />
            NOTE
          </p>
          <Fragment
            set:html={t.info.devNote({
              configKey: 'buildConfig.showDraftsOnDev',
              configValue: false,
              configFilePath: 'src/config.ts',
            })}
          />
        </div>
      )
    }
    <Content />
  </Markdown>
  <License time={article.data.published} lang={article.data.lang} />
  {backLinks.length > 0 && <BackLinks backLinks={backLinks} />}
</PostPageLayout>
