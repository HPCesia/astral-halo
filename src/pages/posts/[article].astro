---
import { buildConfig, siteConfig } from '@/config';
import BackLinks from '@components/misc/BackLinks.astro';
import License from '@components/misc/License.astro';
import PostInfo from '@components/misc/PostInfo.astro';
import ImageWrapper from '@components/utils/ImageWrapper.astro';
import Markdown from '@components/utils/Markdown.astro';
import Replacer from '@components/utils/Replacer.astro';
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import PostPageLayout from '@layouts/PostPageLayout.astro';
import { getPosts } from '@utils/content-utils';
import { Icon } from 'astro-icon/components';
import { render, type CollectionEntry } from 'astro:content';
import MarkdownIt from 'markdown-it';

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((article) => ({
    params: { article: article.data.slug },
    props: { article },
  }));
}

const { article } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(article);
const coverSrc =
  typeof article.data.cover === 'string' ? article.data.cover : article.data.cover?.src;
const description = article.data.description || remarkPluginFrontmatter.excerpt;
const isDraft = article.data.draft === true;

const referencePattern = /%%%%(.*?)(?:%%(.*?))?%%%%/g;
const allPosts = await getPosts();
const pathIdMap = allPosts.reduce(
  (acc, post) => {
    const slug = post.id;
    const path = post.filePath!.replace('src/content/', '').split('.').slice(0, -1).join('.');
    acc[path] = slug;
    return acc;
  },
  {} as Record<string, string>
);
const getArticle = (refPath: string) => {
  let collection = refPath.split('/')[0];
  if (!['posts', 'drafts', 'spec'].includes(collection)) {
    collection = 'posts';
    refPath = `posts/${refPath}`;
  }
  const id = pathIdMap[refPath];
  if (id) {
    return allPosts.find((post) => post.id === id);
  }
};
const references: {
  reference: string;
  context: string;
  id: string;
}[] = remarkPluginFrontmatter.references || [];
const replacer = (_: string, reference: string, alias: string) => {
  const refArticle = getArticle(reference);
  if (
    refArticle &&
    (refArticle.data.draft === false || (buildConfig.showDraftsOnDev && import.meta.env.DEV))
  ) {
    const url = `/posts/${refArticle.id}`;
    const id = references.find((item) => item.reference === reference)?.id;
    return `<a href="${url}" id="wiki-${id}">${alias || reference}</a>`;
  } else {
    return '';
  }
};

const backLinks: {
  reference: CollectionEntry<'posts'>;
  context: string;
  offset: [number, number];
  id: string;
}[] = (
  await Promise.all(
    allPosts.map(async (post) => {
      const { remarkPluginFrontmatter } = await render(post);
      const references: {
        reference: string;
        context: string;
        offset: [number, number];
        id: string;
      }[] = remarkPluginFrontmatter.references || [];
      return references
        .map((reference) => {
          const refArticle = getArticle(reference.reference);
          if (refArticle && refArticle.id === article.id) {
            return {
              reference: post,
              context: reference.context,
              offset: reference.offset,
              id: reference.id,
            };
          }
          return undefined;
        })
        .filter((item) => item !== undefined);
    })
  )
).flat();
---

<PostPageLayout
  title={article.data.title}
  description={description}
  headings={headings}
  comment={article.data.comment}
  lang={article.data.lang}
  banner={coverSrc}
>
  <Fragment slot="header-content">
    <PostInfo
      title={article.data.title}
      publishedAt={article.data.published}
      category={article.data.category}
      tags={article.data.tags}
      wordCount={remarkPluginFrontmatter.words}
      readingTime={remarkPluginFrontmatter.minutes}
      lang={article.data.lang}
      class="mx-2 mt-4"
    />
  </Fragment>
  {
    siteConfig.banner === false && coverSrc && (
      <ImageWrapper src={coverSrc!} class="mb-6 rounded-xl shadow" alt={article.data.title} />
    )
  }
  <Markdown>
    {
      isDraft && (
        <div class="admonition admonition-note">
          <p class="admonition-title">
            <Icon name="material-symbols:info-outline-rounded" />
            NOTE
          </p>
          <Fragment set:html={new MarkdownIt().render(i18n(I18nKey.draftDevNote)!)} />
        </div>
      )
    }
    <Replacer pattern={referencePattern} replacer={replacer}>
      <Content />
    </Replacer>
  </Markdown>
  <License time={article.data.published} lang={article.data.lang} />
  {backLinks.length > 0 && <BackLinks backLinks={backLinks} />}
</PostPageLayout>
