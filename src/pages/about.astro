---
import PostInfo from '@components/misc/PostInfo.astro';
import Markdown from '@components/utils/Markdown.astro';
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import PostPageLayout from '@layouts/PostPageLayout.astro';
import { getAllReferences } from '@utils/content-utils';
import { getEntry, render } from 'astro:content';

const md = await getEntry('spec', 'about');

const { Content, headings, remarkPluginFrontmatter } = md
  ? await render(md)
  : {
      Content: Fragment,
      headings: [],
      remarkPluginFrontmatter: { references: [] },
    };

const allReferences = await getAllReferences();
let allRefByCurrent: typeof allReferences = [];
let references: {
  reference: string;
  context: string;
  id: string;
}[] = [];
if (md) {
  allRefByCurrent = allReferences.filter((it) => it.refBy.id === md.id);
  references = remarkPluginFrontmatter.references || [];
}
---

<PostPageLayout
  title={md?.data.title || (i18n(I18nKey.about) as string)}
  headings={headings}
  comment={md?.data.comment}
>
  <Fragment slot="header-content">
    <PostInfo title={md?.data.title || (i18n(I18nKey.about) as string)} />
  </Fragment>
  <Markdown
    bidirectional-references={md
      ? {
          references,
          allRefByCurrent,
        }
      : undefined}
  >
    <Content />
  </Markdown>
</PostPageLayout>
