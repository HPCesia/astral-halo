---
import { siteConfig } from '@/config';
import type { BlogPostData } from '@/types/data';
import ProfileCard from '@components/aside/ProfileCard.astro';
import TOC from '@components/aside/TOC.astro';
import Button from '@components/widgets/Button.astro';
import MetaIcon from '@components/widgets/MetaIcon.astro';
import I18nKey from '@i18n/I18nKey';
import { i18n } from '@i18n/translation';
import MainLayout from '@layouts/MainLayout.astro';
import { getCategoryUrl, getPostsCount, getSortedPosts, getTagUrl } from '@utils/content-utils';
import { Icon } from 'astro-icon/components';

export async function getStaticPaths() {
  const allBlogPosts = await getSortedPosts();
  const yearMap = new Map<number, Map<number, { body: string; data: BlogPostData }[]>>();
  for (const post of allBlogPosts) {
    const year = post.data.published.getFullYear();
    const month = post.data.published.getMonth() + 1;
    let monthMap = yearMap.get(year);
    if (!monthMap) {
      monthMap = new Map();
      yearMap.set(year, monthMap);
    }
    let monthPosts = monthMap.get(month);
    if (!monthPosts) {
      monthPosts = [];
      monthMap.set(month, monthPosts);
    }
    monthPosts.push(post);
  }
  const data = Array.from(yearMap.entries()).map(([year, monthMap]) => ({
    year,
    data: Array.from(monthMap.entries()).map(([month, postData]) => ({
      month,
      data: postData,
    })),
  }));
  const paths = [
    {
      params: {
        time: undefined,
      },
      props: {
        data,
      },
    },
    ...data.map(({ year }) => ({
      params: {
        time: year.toString(),
      },
      props: {
        data: data,
      },
    })),
    ...data.flatMap(({ year, data: monthData }) =>
      monthData.map(({ month }) => ({
        params: {
          time: `${year}/${month}`,
        },
        props: {
          data: data,
        },
      }))
    ),
  ];
  return paths;
}

const { data } = Astro.props;
const slug = Astro.params.time;
const postCount = await getPostsCount();
---

<MainLayout>
  <div class="card border-base-300 bg-base-200/25 swup-transition-fade border px-6 py-4">
    <div class="tooltip md:tooltip-right tooltip-bottom mx-auto w-fit">
      <h1 class="text-center text-3xl font-bold">{i18n(I18nKey.archive)}</h1>
      <div class="tooltip-content">
        {`${postCount} ${i18n(postCount > 1 ? I18nKey.postsCount : I18nKey.postCount)}`}
      </div>
    </div>
    {
      (() => {
        function renderMonth(year: number, month: number) {
          let monthData = data
            .find((d) => d.year === year)
            ?.data.find((d) => d.month === month)?.data;
          if (!monthData) {
            return <p>SHOULD NOT RENDER THIS, IS A BUG</p>;
          }
          return (
            <ul class="list">
              {monthData.map(({ data }) => (
                <li class="list-row">
                  <div class="list-col-grow">
                    <a
                      href={`/posts/${data.slug}`}
                      title={data.title}
                      class="text-lg font-bold"
                    >
                      {data.title}
                    </a>
                    <div class="text-base-content/60 mt-2 flex flex-wrap items-start gap-x-4 gap-y-2 text-sm">
                      {[
                        {
                          icon: 'material-symbols:category-outline-rounded',
                          text: data.category || i18n(I18nKey.uncategorized),
                          link: getCategoryUrl(data.category),
                        },
                        ...data.tags.map((tag) => {
                          return {
                            icon: 'material-symbols:tag-rounded',
                            text: tag,
                            link: getTagUrl(tag),
                          };
                        }),
                      ].map((meta) => (
                        <div class="flex items-center gap-0">
                          <MetaIcon name={meta.icon} />
                          {meta.link ? (
                            <a href={meta.link} class="meta-text" title={meta.text}>
                              {meta.text}
                            </a>
                          ) : (
                            <span class="meta-text">{meta.text}</span>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                  <time
                    datetime={data.published.toISOString()}
                    data-no-relative="true"
                    class="text-base-content/60"
                  >
                    {data.published.toLocaleDateString(siteConfig.lang.replace('_', '-'))}
                  </time>
                </li>
              ))}
            </ul>
          );
        }

        function renderYear(year: number, reverse: boolean = false) {
          const yearData = data.find((d) => d.year === year)?.data;
          if (!yearData) {
            return <p>SHOULD NOT RENDER THIS, IS A BUG</p>;
          }
          return (
            <ul class="timeline timeline-snap-icon timeline-vertical max-md:timeline-compact w-full">
              {yearData.map(({ month }, index) => (
                <li>
                  {index > 0 && <hr />}
                  <div class="timeline-middle">
                    <Icon
                      name="material-symbols:add-circle-rounded"
                      height="1.25rem"
                      width="1.25rem"
                    />
                  </div>
                  <div
                    class:list={[
                      `timeline-${(index % 2 === 0) !== reverse ? 'start' : 'end'}`,
                      'w-full',
                    ]}
                  >
                    <div
                      class:list={[
                        (index % 2 === 0) !== reverse && 'md:flex-row-reverse',
                        'mx-4 flex scroll-mt-20 flex-row items-center justify-between',
                      ]}
                      id={`${year}-${month}`}
                    >
                      <div class="text-2xl font-bold">{month}</div>
                      <Button
                        href={`/archives/${year}/${month}`}
                        title={`${year}/${month}`}
                        class="pl-3"
                      >
                        {i18n(I18nKey.more)}
                        <Icon
                          name="material-symbols:chevron-right-rounded"
                          height="1.5rem"
                          width="1.5rem"
                        />
                      </Button>
                    </div>
                    <div class="mx-2">{renderMonth(year, month)}</div>
                  </div>
                  <hr />
                </li>
              ))}
            </ul>
          );
        }

        function renderAll() {
          let totalMonths = 0;
          return data.map(({ year, data: yearData }) => {
            const reverse = totalMonths % 2 !== 0;
            totalMonths += yearData.length;
            return (
              <>
                <div class="divider mt-12 scroll-mt-20 text-2xl font-bold" id={`${year}`}>
                  <a
                    href={`/archives/${year}`}
                    title={`${year}`}
                    class="hover:text-primary duration-200"
                  >
                    {year}
                  </a>
                </div>
                <div class="px-4">{renderYear(year, reverse)}</div>
              </>
            );
          });
        }

        if (slug) {
          const [year, month] = slug.split('/').map(Number);
          if (month) {
            return renderMonth(year, month);
          }
          return renderYear(year);
        } else {
          return renderAll();
        }
      })()
    }
  </div>
  <Fragment slot="aside-fixed">
    <ProfileCard />
  </Fragment>
  <Fragment slot="aside-sticky">
    {
      !slug && (
        <TOC
          headings={data.flatMap(({ year, data }) => [
            {
              depth: 2,
              text: year.toString(),
              slug: `${year}`,
            },
            ...data.map(({ month }) => ({
              depth: 3,
              text: month.toString(),
              slug: `${year}-${month}`,
            })),
          ])}
        />
      )
    }
  </Fragment>
</MainLayout>
