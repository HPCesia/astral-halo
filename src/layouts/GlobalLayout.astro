---
import { profileConfig, searchConfig, siteConfig } from '@/config';
import '@/styles/global.css';
import '@/styles/transition.css';
import type { Favicon } from '@/types/config';
import Banner from '@components/Banner.astro';
import Navbar from '@components/Navbar.astro';
import PageFooter from '@components/PageFooter.astro';
import Search from '@components/Search.astro';
import SideToolBar from '@components/SideToolBar.astro';
import { defaultFavicons } from '@constants/icon';

interface Props {
  title?: string;
  description?: string;
  lang?: string;
  banner?: {
    src: string;
    basePath?: string;
  };
}

let { title, lang } = Astro.props;
const { description, banner } = Astro.props;

let pageTitle: string;
if (title) pageTitle = `${title} - ${siteConfig.title}`;
else
  pageTitle = `${siteConfig.title}${siteConfig.subtitle.length > 0 ? ` - ${siteConfig.subtitle}` : ''}`;

if (!lang) lang = `${siteConfig.lang}`;
const siteLang = lang.replace('_', '-');

const favicons: Favicon[] =
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;
---

<!doctype html>
<html lang={siteLang}>
  <head>
    <title>{pageTitle}</title>

    <meta charset="UTF-8" />
    <meta name="author" content={profileConfig.name} />

    <!-- Open Graph / Facebook -->
    <meta property="og:site_name" content={siteConfig.title} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description || pageTitle} />

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description || pageTitle} />

    <meta name="viewport" content="width=device-width" />

    <meta name="generator" content={Astro.generator} />

    {
      favicons.map((favicon) => (
        <link
          rel="icon"
          href={
            favicon.src.startsWith('/')
              ? ['', import.meta.env.BASE_URL, favicon.src].join('/').replace(/\/+/g, '/')
              : favicon.src
          }
          sizes={favicon.sizes}
        />
      ))
    }

    <link
      rel="alternate"
      type="application/rss+xml"
      title={siteConfig.title}
      href={new URL('rss.xml', Astro.site)}
    />

    <slot name="head" />
  </head>
  <body class="bg-base-100 text-base-content flex min-h-screen flex-col">
    <SideToolBar />
    <Navbar title={siteConfig.title}>
      <slot name="header" />
      {siteConfig.banner !== false && <Banner src={banner?.src} basePath={banner?.basePath} />}
      <div id="body-wrap" class="w-full items-center md:px-4">
        <slot />
      </div>
    </Navbar>
    {searchConfig.enable && <Search />}
    <PageFooter />
    {siteConfig.banner !== false && <div id="page-height-extend" class="hidden" />}
  </body>
</html>

{/* 初始化 Swup */}
<script>
  import SwupHeadPlugin from '@swup/head-plugin';
  import SwupParallelPlugin from '@swup/parallel-plugin';
  import SwupPreloadPlugin from '@swup/preload-plugin';
  import SwupProgressPlugin from '@swup/progress-plugin';
  import SwupScriptsPlugin from '@swup/scripts-plugin';
  import SwupScrollPlugin from '@swup/scroll-plugin';
  import Swup from 'swup';

  import { siteConfig } from '@/config';

  window.swup = new Swup({
    containers: ['main', ...(siteConfig.banner === false ? [] : ['#banner-img'])],
    animationSelector: '[class*="swup-transition-"]',
    plugins: [
      new SwupHeadPlugin(),
      new SwupParallelPlugin({
        containers: [...(siteConfig.banner === false ? [] : ['#banner-img'])],
      }),
      new SwupPreloadPlugin(),
      new SwupProgressPlugin({
        delay: 2000,
      }),
      new SwupScriptsPlugin(),
      new SwupScrollPlugin(),
    ],
  });

  const dispatch = (name: string) => document.dispatchEvent(new Event(name));
  window.swup.hooks.before('content:replace', () => dispatch('astro:before-swap'));
  window.swup.hooks.on('content:replace', () => dispatch('astro:after-swap'));
  window.swup.hooks.on('page:view', () => dispatch('astro:page-load'));
</script>

<script>
  import { convertTimeToRelative } from '@scripts/utils';
  import mediumZoom from 'medium-zoom/dist/pure';

  // 深色模式切换
  function applyDarkMode() {
    if (
      localStorage.darkMode === 'true' ||
      (!('darkMode' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.setAttribute('data-theme', 'dark');
    } else document.documentElement.setAttribute('data-theme', 'light');
  }

  function setup() {
    applyDarkMode();
    convertTimeToRelative();
    mediumZoom('[data-zoom]', {
      background: 'rgba(0, 0, 0, 0.4)',
    });
  }

  document.addEventListener('astro:after-swap', setup);
  setup();
</script>

<style is:global>
  @import 'medium-zoom/dist/style.css';
  .medium-zoom-overlay,
  .medium-zoom-image--opened {
    z-index: 999;
  }
</style>
